AWSTemplateFormatVersion: "2010-09-09"
Description: "AI Career Agent - AWS Infrastructure for Hackathon Submission"

Parameters:
  ProjectName:
    Type: String
    Default: "ai-career-agent"
    Description: "Name of the project for resource naming"

  Environment:
    Type: String
    Default: "prod"
    AllowedValues: ["dev", "staging", "prod"]
    Description: "Environment name"

Resources:
  # S3 Buckets for document storage
  DocumentStorageBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "${ProjectName}-documents-${Environment}"
      VersioningConfiguration:
        Status: Enabled
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true

  JobDataBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "${ProjectName}-job-data-${Environment}"
      VersioningConfiguration:
        Status: Enabled
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true

  # IAM Role for Lambda Functions
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${ProjectName}-lambda-execution-role"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: BedrockAccess
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - bedrock:InvokeModel
                  - bedrock:InvokeModelWithResponseStream
                Resource: "*"
        - PolicyName: S3Access
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                  - s3:DeleteObject
                Resource:
                  - !Sub "${DocumentStorageBucket}/*"
                  - !Sub "${JobDataBucket}/*"
              - Effect: Allow
                Action:
                  - s3:ListBucket
                Resource:
                  - !Ref DocumentStorageBucket
                  - !Ref JobDataBucket
        - PolicyName: SNSSESAccess
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - sns:Publish
                  - ses:SendEmail
                  - ses:SendRawEmail
                Resource: "*"

  # IAM Role for Bedrock Agent
  BedrockAgentRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "AmazonBedrockExecutionRoleForAgents_${ProjectName}"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: bedrock.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: BedrockAgentPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - bedrock:InvokeModel
                Resource: "*"
              - Effect: Allow
                Action:
                  - lambda:InvokeFunction
                Resource:
                  - !GetAtt MarketIntelligenceFunction.Arn
                  - !GetAtt JobSearchFunction.Arn
                  - !GetAtt ResumeOptimizerFunction.Arn

  # Lambda Functions
  MarketIntelligenceFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "${ProjectName}-market-intelligence"
      Runtime: python3.11
      Handler: market_intelligence.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        ZipFile: |
          # Placeholder - actual code will be deployed separately
          def lambda_handler(event, context):
              return {'statusCode': 200, 'body': 'Function placeholder'}
      Timeout: 300
      MemorySize: 512
      Environment:
        Variables:
          DOCUMENT_BUCKET: !Ref DocumentStorageBucket
          JOB_DATA_BUCKET: !Ref JobDataBucket

  JobSearchFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "${ProjectName}-job-search"
      Runtime: python3.11
      Handler: job_search_agent.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        ZipFile: |
          # Placeholder - actual code will be deployed separately
          def lambda_handler(event, context):
              return {'statusCode': 200, 'body': 'Function placeholder'}
      Timeout: 300
      MemorySize: 512
      Environment:
        Variables:
          DOCUMENT_BUCKET: !Ref DocumentStorageBucket
          JOB_DATA_BUCKET: !Ref JobDataBucket

  ResumeOptimizerFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "${ProjectName}-resume-optimizer"
      Runtime: python3.11
      Handler: resume_optimizer.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        ZipFile: |
          # Placeholder - actual code will be deployed separately
          def lambda_handler(event, context):
              return {'statusCode': 200, 'body': 'Function placeholder'}
      Timeout: 300
      MemorySize: 1024
      Environment:
        Variables:
          DOCUMENT_BUCKET: !Ref DocumentStorageBucket
          JOB_DATA_BUCKET: !Ref JobDataBucket

  # Lambda Permissions for Bedrock Agent
  MarketIntelligencePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref MarketIntelligenceFunction
      Action: lambda:InvokeFunction
      Principal: bedrock.amazonaws.com
      SourceArn: !Sub "arn:aws:bedrock:${AWS::Region}:${AWS::AccountId}:agent/*"

  JobSearchPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref JobSearchFunction
      Action: lambda:InvokeFunction
      Principal: bedrock.amazonaws.com
      SourceArn: !Sub "arn:aws:bedrock:${AWS::Region}:${AWS::AccountId}:agent/*"

  ResumeOptimizerPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref ResumeOptimizerFunction
      Action: lambda:InvokeFunction
      Principal: bedrock.amazonaws.com
      SourceArn: !Sub "arn:aws:bedrock:${AWS::Region}:${AWS::AccountId}:agent/*"

  # SNS Topic for notifications
  JobNotificationTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: !Sub "${ProjectName}-job-notifications"
      DisplayName: "AI Career Agent Job Notifications"

  # EventBridge Rule for daily job search
  DailyJobSearchRule:
    Type: AWS::Events::Rule
    Properties:
      Name: !Sub "${ProjectName}-daily-job-search"
      Description: "Trigger daily job search for all active users"
      ScheduleExpression: "cron(0 9 * * ? *)" # Daily at 9 AM UTC
      State: ENABLED
      Targets:
        - Arn: !GetAtt JobSearchFunction.Arn
          Id: "DailyJobSearchTarget"
          Input: '{"trigger": "daily_search"}'

  # Permission for EventBridge to invoke Lambda
  DailyJobSearchPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref JobSearchFunction
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt DailyJobSearchRule.Arn

Outputs:
  DocumentBucketName:
    Description: "S3 bucket for document storage"
    Value: !Ref DocumentStorageBucket
    Export:
      Name: !Sub "${ProjectName}-document-bucket"

  JobDataBucketName:
    Description: "S3 bucket for job data storage"
    Value: !Ref JobDataBucket
    Export:
      Name: !Sub "${ProjectName}-job-data-bucket"

  BedrockAgentRoleArn:
    Description: "ARN of the Bedrock Agent execution role"
    Value: !GetAtt BedrockAgentRole.Arn
    Export:
      Name: !Sub "${ProjectName}-bedrock-agent-role-arn"

  MarketIntelligenceFunctionArn:
    Description: "ARN of the Market Intelligence Lambda function"
    Value: !GetAtt MarketIntelligenceFunction.Arn
    Export:
      Name: !Sub "${ProjectName}-market-intelligence-function-arn"

  JobSearchFunctionArn:
    Description: "ARN of the Job Search Lambda function"
    Value: !GetAtt JobSearchFunction.Arn
    Export:
      Name: !Sub "${ProjectName}-job-search-function-arn"

  ResumeOptimizerFunctionArn:
    Description: "ARN of the Resume Optimizer Lambda function"
    Value: !GetAtt ResumeOptimizerFunction.Arn
    Export:
      Name: !Sub "${ProjectName}-resume-optimizer-function-arn"

  NotificationTopicArn:
    Description: "ARN of the SNS notification topic"
    Value: !Ref JobNotificationTopic
    Export:
      Name: !Sub "${ProjectName}-notification-topic-arn"
